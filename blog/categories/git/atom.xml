<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Usha Guduri]]></title>
  <link href="http://ushaguduri.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://ushaguduri.com/"/>
  <updated>2013-03-22T13:50:26-04:00</updated>
  <id>http://ushaguduri.com/</id>
  <author>
    <name><![CDATA[Usha Guduri]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Branches - Local]]></title>
    <link href="http://ushaguduri.com/blog/2013/02/19/git-branches-local/"/>
    <updated>2013-02-19T20:23:00-05:00</updated>
    <id>http://ushaguduri.com/blog/2013/02/19/git-branches-local</id>
    <content type="html"><![CDATA[<p>Once you clone a Git repository, you are highly unlikely to work on the <em>master</em> unless you are a Maverick! The immediate thing you will look out for is branching - whether it is to add new features or even fix your bugs before pushing them live (Do you do 'Test Driven Development', by the way? :-D ). And Git is a great tool in this realm because branches are really really cheap - both in terms of memory and time (when switching between branches)</p>

<p>You start off with knowing the current branch you are working on with</p>

<pre><code>$ git branch
</code></pre>

<!-- more -->


<p>You can get a list of all the branches using:</p>

<pre><code>$ git branch -a --&gt; all local and remote branches
$ git branch -r --&gt; remote branches only
</code></pre>

<p>Creating a local branch is a simple</p>

<pre><code>$ git branch myLocalBranch
</code></pre>

<p>Beware that the above only creates a branch, it does not check it out and set it up ready for use. To do both at once, you can use:</p>

<pre><code>$ git checkout -b myLocalBranch
</code></pre>

<p>While working in branches is good, it is also a good practice to keep your branch as close as possible to master (if you want to avoid day long conflict resolutions) by regularly updating from master by one of the 2 following ways:</p>

<ol>
<li><p>merging master into your branch. This will create a separate commit that master was merged or a custom message that you may choose in case of conflicts.</p>

<pre><code> $ git merge master
</code></pre></li>
<li><p>rebasing against master, generally a cleaner (preferred by many) way to get the changes into your branch. This does not create a separate commit in case of conflicts.</p>

<pre><code> $ git rebase master
 $ git rebase --continue (once you resolve any conflicts)
</code></pre></li>
</ol>


<p>Note that these are just local branches on your machine. All changes/commits reside on your machine, not on the remote server. We'll look at remote branches soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting into the Git land-via SVN]]></title>
    <link href="http://ushaguduri.com/blog/2012/11/12/getting-into-the-git-land-via-svn/"/>
    <updated>2012-11-12T14:15:00-05:00</updated>
    <id>http://ushaguduri.com/blog/2012/11/12/getting-into-the-git-land-via-svn</id>
    <content type="html"><![CDATA[<p>All the cool kids use git these days but shifting gears for your way-way-back-then-started repo into git is an intimidating task, let alone scaring the entire team while everyone is busy getting their stuff done.</p>

<p>But you still want to learn git? there is no better way to that than using it every single day-isnt that how you became a pro at svn in the first place? so here comes git-svn to the rescue.</p>

<p>Its a real simple tool that goes bi-directional between git and svn and is so well done that sometimes its just prepending git in front of svn commands!</p>

<p>To start a git repo from svn is as easy as</p>

<!-- more -->


<p><code>
$ git svn clone -s http://example.com/subversion_repo local_dir
</code></p>

<p>If your svn repo is not using the standard layout of trunk/branches/tags, you can specify what they are using -T , -b , -t like so
<code>
$ git svn clone -s http://example.com/my_subversion_repo -T trunk -b my-branch-tree -t my-tag-tree local_dir
</code></p>

<p>Before you start making changes though, you might want to set up the annoying ‘ignores’. Just copy over svn ignore config into git with:
<code>
$ git svn show-ignore » .git/info/exclude
</code></p>

<p>Ensure your checkout is pointing to the right repo
<code>
$ git svn info
</code>
And now you can start exploring and committing to the local git repo using git commands like
<code>
$ git add my-file
$ git commit my-file
</code></p>

<p>Then comes the slight difference between real git repos and git-svn repos. you most likely heard about git pushing changes. with git-svn, you’d
<code>
$ git svn dcommit
</code>
to push changes to the svn repo. and there you go-you made your first commit to svn via git-irony!!</p>

<p>More to come on .gitconfig, branches, cherry-pick’ing etc. but let me suggest installing bash-completion right away so you can just tab-complete the commands instead of typing out in entirety each time-all about saving those precious strokes that so risk every software engineer to carpal tunnel!</p>
]]></content>
  </entry>
  
</feed>
