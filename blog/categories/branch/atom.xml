<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: branch | Usha Guduri]]></title>
  <link href="http://ushaguduri.com/blog/categories/branch/atom.xml" rel="self"/>
  <link href="http://ushaguduri.com/"/>
  <updated>2013-02-19T22:31:56-05:00</updated>
  <id>http://ushaguduri.com/</id>
  <author>
    <name><![CDATA[Usha Guduri]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Branches - Local]]></title>
    <link href="http://ushaguduri.com/blog/2013/02/19/git-branches-local/"/>
    <updated>2013-02-19T20:23:00-05:00</updated>
    <id>http://ushaguduri.com/blog/2013/02/19/git-branches-local</id>
    <content type="html"><![CDATA[<p>Once you clone a Git repository, you are highly unlikely to work on the <em>master</em> unless you are a Maverick! The immediate thing you will look out for is branching - whether it is to add new features or even fix your bugs before pushing them live (Do you do 'Test Driven Development', by the way? :-D ). And Git is a great tool in this realm because branches are really really cheap - both in terms of memory and time (when switching between branches)</p>

<p>You start off with knowing the current branch you are working on with</p>

<pre><code>$ git branch
</code></pre>

<!-- more -->


<p>You can get a list of all the branches using:</p>

<pre><code>$ git branch -a --&gt; all local and remote branches
$ git branch -r --&gt; remote branches only
</code></pre>

<p>Creating a local branch is a simple</p>

<pre><code>$ git branch myLocalBranch
</code></pre>

<p>Beware that the above only creates a branch, it does not check it out and set it up ready for use. To do both at once, you can use:</p>

<pre><code>$ git checkout -b myLocalBranch
</code></pre>

<p>While working in branches is good, it is also a good practice to keep your branch as close as possible to master (if you want to avoid day long conflict resolutions) by regularly updating from master by one of the 2 following ways:</p>

<ol>
<li><p>merging master into your branch. This will create a separate commit that master was merged or a custom message that you may choose in case of conflicts.</p>

<pre><code> $ git merge master
</code></pre></li>
<li><p>rebasing against master, generally a cleaner (preferred by many) way to get the changes into your branch. This does not create a separate commit in case of conflicts.</p>

<pre><code> $ git rebase master
 $ git rebase --continue (once you resolve any conflicts)
</code></pre></li>
</ol>


<p>Note that these are just local branches on your machine. All changes/commits reside on your machine, not on the remote server. We'll look at remote branches soon.</p>
]]></content>
  </entry>
  
</feed>
