<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ssh | Usha Guduri]]></title>
  <link href="http://ushaguduri.com/blog/categories/ssh/atom.xml" rel="self"/>
  <link href="http://ushaguduri.com/"/>
  <updated>2013-02-21T12:38:38-05:00</updated>
  <id>http://ushaguduri.com/</id>
  <author>
    <name><![CDATA[Usha Guduri]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PDSH - Parallel Distributed SHell]]></title>
    <link href="http://ushaguduri.com/blog/2012/10/05/pdsh-parallel-distributed-shell/"/>
    <updated>2012-10-05T14:35:00-04:00</updated>
    <id>http://ushaguduri.com/blog/2012/10/05/pdsh-parallel-distributed-shell</id>
    <content type="html"><![CDATA[<p>Unless your application is a serving such a small traffic or is in the Beta stage, you are probably working with a load-balanced set of servers - web/application/database - you name it. And when there is an issue, the task of looking at the logs on each of the servers is a nightmare!</p>

<p>One option is to run a remote command via ssh like:
<code>
$ ssh user@host “date”
</code></p>

<!-- more -->


<p>But identifiying the server where you can find more information means running the above N times changing the host each time. For more involved tasks, it gets even more difficult. Oh and what if you accidentally missed a server and claimed that “something did not happen”! You can wrap the command in a loop and come up with a shell script (choose your own language), of course.</p>

<p>But <a href="http://linux.die.net/man/1/pdsh">pdsh</a> simplifies all that. Its pretty much like your own wrapper, but only with more features - especially running in parallel. And fear not, its not learning another language. Even a simple run without too many options that it provides is enough to free up a ton of your time.
<code>
$ pdsh -R ssh -w user@host[1-8].full.name “date”
</code></p>

<p>Looks so familiar, ain’t it? And all it does is parallel’ly run the date command remotely on host1 through host8.</p>

<p>Whoa! Thats how many keystrokes and minutes saved of your life?</p>

<p>Try it for yourself: <a href="https://code.google.com/p/pdsh/downloads/list">Google Code</a></p>

<p>This is just a flyer ad for pdsh. More details will follow as I keep using it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH access to the Hosting server]]></title>
    <link href="http://ushaguduri.com/blog/2012/10/02/ssh-access-to-the-hosting-server/"/>
    <updated>2012-10-02T14:25:00-04:00</updated>
    <id>http://ushaguduri.com/blog/2012/10/02/ssh-access-to-the-hosting-server</id>
    <content type="html"><![CDATA[<p>This section depends more on what style you are comfortable with: point-and-click or the get-dirty-with-the-command-line. I belong to the 2nd class and feel so lost without access to the bare bone shell (which I immediately customize with aliases/shell functions/shortcuts etc). This can be a discussion in its own right.</p>

<p>So anyway, once you have acquired hosting space, the seller gives you an IP address of a physical machine where you can ‘setup your html files’. Depending on the seller(HostGator), you may have to ‘Enable SSH Access’ to open the ssh port.</p>

<p>Then you can type
<code>
$ ssh -p 1234 username@123.456.78.9
</code></p>

<p>from the shell and voila! you are at the all too familiar bash prompt on the hosting server!</p>

<!-- more -->


<p>But notice that you had to enter your crazy-incomprehensible password,that you most likely copy-paste’d from the email. If you plan on spending any significant time on this box, you will get in and out of it and will be forced to enter the password each time - SSH keys coming to the rescue! I generally use RSA for my keys from my own desktop/laptop.</p>

<p><code>
$ ssh-keygen -t rsa
</code></p>

<p>will generate the necessary public/private keys in your .ssh directory.</p>

<p>You then create a .ssh directory on the new machine and add the id_rsa.pub key to a new authorized_keys file on the server. At the end, here is how the file setup looks like —> note the permissions: 700 for the .ssh directory and 644 for the authorized_keys file
<code>
drwx———  2 username groupname 4096 Sep 30 17:26 ./
-rw-r—r—  1 username groupname  752 Sep 30 17:26 authorized_keys
</code></p>

<p>And the next time you ssh to the host, you dont have to go searching for the password in your email anymore!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVN+SSH: network connection closed unexpectedly]]></title>
    <link href="http://ushaguduri.com/blog/2012/03/13/svn-plus-ssh-network-connection-closed-unexpectedly/"/>
    <updated>2012-03-13T15:27:00-04:00</updated>
    <id>http://ushaguduri.com/blog/2012/03/13/svn-plus-ssh-network-connection-closed-unexpectedly</id>
    <content type="html"><![CDATA[<p>After a long time, I had to work-from-home today because I hurt my shoulder badly. And something with the firewall and/or VPN settings seems to have changed that I couldn’t access the code base anymore. What more can you ask for WFH ;-)</p>

<p>I spent enough time to figure this out that I thought best to note it here. svn was caughing with:</p>

<pre><code>$ svn ls svn+ssh://myhost/myrepo
svn: To better debug SSH connection problems, remove the -q option from ‘ssh’ in the [tunnels] section of your Subversion configuration file.
svn: Network connection closed unexpectedly
</code></pre>

<!-- more -->


<p>The configs(~/.ssh/config and /etc/ssh_config) had nothing specific to tunnels anywhere. I could login to <em>myhost</em> just fine and also port forward to it without problems like before, using the long standing aliases - so nothing stood out. Preliminary instinct is to purge the known_hosts file in ~/.ssh/known_hosts and rebuild it in case the host’s address had changed - no luck. You could see what ssh is doing on a connection with ssh -v, but this is svn+ssh, isnt it? a one-liner to the rescue!</p>

<pre><code>$ export SVN_SSH=”ssh -v “
</code></pre>

<p>and then do retry the svn command to see:</p>

<pre><code>ssh: Could not resolve hostname myhost: nodename nor servname provided, or not known
</code></pre>

<p>Are you kidding me?! Your stupid error message ran me down a dark alley about tunnels and the problem was actually with the hostname?!</p>

<p><strong>Solution:</strong></p>

<ol>
<li><p>As simple as using the FQDN for myhost with each svn command:</p>

<pre><code> $ svn ls svn+ssh://fqdn.myhost.com/myrepo
</code></pre></li>
<li><p>The above is cumbersome if you already have aliases set up or are working with new repos. Better yet is to add the actual IP address for the host to your hosts file in /etc/hosts:</p>

<pre><code> 123.13.13.1 myhost
</code></pre></li>
</ol>


<p><strong>Lesson:</strong> Do not trust the error messages at face value until you get more debug info about where/who its coming from!</p>
]]></content>
  </entry>
  
</feed>
