<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

  <title><![CDATA[Usha Guduri]]></title>
  <link href="https://ushaguduri.com/atom.xml" rel="self"/>
  <link href="https://ushaguduri.com/"/>
  <updated>2014-03-06T13:21:08-08:00</updated>
  <id>https://ushaguduri.com/</id>
  <author>
    <name><![CDATA[Usha Guduri]]></name>

  </author>
  <generator uri="https://octopress.org/">Octopress</generator>


  <entry>
    <title type="html"><![CDATA[Unix in Simple English: whatis-whereis-locate-which]]></title>
    <link href="https://ushaguduri.com/blog/2013/03/12/whatis-whereis-locate-which/"/>
    <updated>2013-03-12T13:04:00-07:00</updated>
    <id>https://ushaguduri.com/blog/2013/03/12/whatis-whereis-locate-which</id>
    <content type="html"><![CDATA[<p>Each application/program over time, as it evolves (hopefully for the better!), is released in several versions. Ever wondered which version is being used or where/what all the versions installed are?
Its quite easy with just using simple english in unix!</p>

<p>Lets start with a quick snippet on what an executable is with &#8216;whatis&#8217;. It searches for <em>whole</em> words within the whatis database that contains short descriptions of system commands.</p>

<pre><code>$ whatis ruby
irb(1), erb(1), ri(1), rdoc(1), testrb(1) - Ruby helper programs
ruby(1)                  - Interpreted object-oriented scripting language
</code></pre>

<p>Now &#8216;whereis&#8217; does the job of indicating where the specified executable is.</p>

<!-- more -->


<pre><code>$ whereis ruby
/usr/bin/ruby
/usr/local/bin/ruby
</code></pre>

<p>However, note that &#8216;whereis&#8217; only &#8220;checks the standard binary directories&#8221; like /bin, /sbin, /usr/bin. To locate all different variations of the file &#8216;ruby&#8217;, irrespective of where they are installed, we&#8217;d use &#8216;locate&#8217; like so:</p>

<pre><code>$ locate ruby
/Users/ushaguduri/.rvm/ruby-1.8.7-p371/ruby
/Users/ushaguduri/.rvm/ruby-1.8.7-p371@global/ruby
/Users/ushaguduri/.rvm/ruby-1.9.3-p392/ruby
/Users/ushaguduri/.rvm/ruby-1.9.3-p392@global/ruby
/Users/ushaguduri/.rvm/ruby-2.0.0-p0/ruby
/Users/ushaguduri/.rvm/ruby-2.0.0-p0@global/ruby
/usr/bin/ruby
/usr/lib/ruby
</code></pre>

<p>This lists all matches in the filename including the full path for the given pattern. The database is pre-computed with `locatedb&#8217; and re-computed periodically. An alternative is to use the &#8216;find&#8217; command for more real-time results using tree search.</p>

<p>And finally with all the different versions installed, which one is being used when you run &#8216;ruby&#8217;?</p>

<pre><code>$ which ruby
/Users/ushaguduri/.rvm/rubies/ruby-1.9.3-p385/bin/ruby
</code></pre>

<p>Since I changed the ruby version with rvm to 1.9.3, its showing the 1.9.3 executable. If I switched it back to the default, it would now look like this:</p>

<pre><code>  $ which ruby
  /usr/bin/ruby
</code></pre>

<p>&#8216;which&#8217; looks for the executable within the user&#8217;s path. Now how the user&#8217;s path is determined will be left for another post!</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Extended File Attributes]]></title>
    <link href="https://ushaguduri.com/blog/2013/03/08/extended-file-attributes/"/>
    <updated>2013-03-08T12:04:00-08:00</updated>
    <id>https://ushaguduri.com/blog/2013/03/08/extended-file-attributes</id>
    <content type="html"><![CDATA[<p>The other day, a simple</p>

<pre><code>ushaguduri@work:Wed Feb 20 15:40:17 -&gt; ls -al
-rw-r--r--@ 1 ushaguduri  staff   899B Feb 20 15:26 test_file
</code></pre>

<p>got me digging deeper into the underlying File System. Notice the <strong>@</strong> after the file permissions?
That&#8217;s a way to associate metadata with a file. Its not used by the file system for any useful purpose - just to store additional information, say like the source of the file, author etc.</p>

<p>Bringing up the manual for the ls command describes the <strong>@</strong> as an available option too:</p>

<pre><code> -@      Display extended attribute keys and sizes in long (-l) output.
</code></pre>

<!-- more -->


<p>Further digging leads to the <em>xattr</em> command and using it on the <em>test_file</em> above showed interesting data:</p>

<pre><code>ushaguduri@work:Wed Feb 20 15:40:41 scripts(db5-v1-me) -&gt; xattr warmup_redis.rb
com.apple.metadata:kMDItemWhereFroms
com.apple.quarantine
</code></pre>

<p>The above two values in particular indicate:</p>

<ol>
<li><p><em>com.apple.metadata:kMDItemWhereFroms</em>: where the file was downloaded from along with a binary property list, if any</p></li>
<li><p><em>com.apple.quarantine</em>: added by the OS the first time a file is downloaded(referring to the source of the download), so that it can ask for confirmation when the program is run (to stop malware by ensuring that the user is aware of a program wanting to execute). Once confirmed the attribute would be removed so that the program can run normally again without user confirmation.</p></li>
</ol>


<p><em>xattr</em> command takes several options to manipulate the metadata:</p>

<pre><code>-l --&gt; list the actual values
-d --&gt; delete the attribute
-w --&gt; set the attribute
</code></pre>

<p>For example:</p>

<pre><code>ushaguduri@work:Wed Feb 20 15:41:57 scripts(db5-v1-me) -&gt; xattr -l test_file
com.apple.metadata:kMDItemWhereFroms:
00000000  62 70 6C 69 73 74 30 30 A2 01 02 5F 10 4F 68 74  |bplist00..._.Oht|
00000010  74 70 73 3A 2F 2F 74 69 63 6B 65 74 73 2E 73 6D  |tps://&lt;website url&gt;|
.......
000000A0  00 00 00 00 01 01 00 00 00 00 00 00 00 03 00 00  |................|
000000B0  00 00 00 00 00 00 00 00 00 00 00 00 00 9B        |..............|
000000be
com.apple.quarantine: 0001;51253196;Google Chrome DEV.app;193F85B5-63F1-4A50-A83E-5713ED49D904|com.google.Chrome
ushaguduri@work:Wed Feb 20 15:41:59 scripts(db5-v1-me) -&gt; xattr -w com.apple.metadata:kMDItemWhereFroms https://example.com test_file
</code></pre>

<p><strong>Bonus:</strong> If you dont want the quarantine attribute set, you can override the defaults on Mac [if you know what you are doing ;)] as such:</p>

<pre><code>   defaults write com.apple.LaunchServices LSQuarantine -bool NO
</code></pre>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Git Branches - Local]]></title>
    <link href="https://ushaguduri.com/blog/2013/02/19/git-branches-local/"/>
    <updated>2013-02-19T20:23:00-08:00</updated>
    <id>https://ushaguduri.com/blog/2013/02/19/git-branches-local</id>
    <content type="html"><![CDATA[<p>Once you clone a Git repository, you are highly unlikely to work on the <em>master</em> unless you are a Maverick! The immediate thing you will look out for is branching - whether it is to add new features or even fix your bugs before pushing them live (Do you do &#8216;Test Driven Development&#8217;, by the way? :-D ). And Git is a great tool in this realm because branches are really really cheap - both in terms of memory and time (when switching between branches)</p>

<p>You start off with knowing the current branch you are working on with</p>

<pre><code>$ git branch
</code></pre>

<!-- more -->


<p>You can get a list of all the branches using:</p>

<pre><code>$ git branch -a --&gt; all local and remote branches
$ git branch -r --&gt; remote branches only
</code></pre>

<p>Creating a local branch is a simple</p>

<pre><code>$ git branch myLocalBranch
</code></pre>

<p>Beware that the above only creates a branch, it does not check it out and set it up ready for use. To do both at once, you can use:</p>

<pre><code>$ git checkout -b myLocalBranch
</code></pre>

<p>While working in branches is good, it is also a good practice to keep your branch as close as possible to master (if you want to avoid day long conflict resolutions) by regularly updating from master by one of the 2 following ways:</p>

<ol>
<li><p>merging master into your branch. This will create a separate commit that master was merged or a custom message that you may choose in case of conflicts.</p>

<pre><code> $ git merge master
</code></pre></li>
<li><p>rebasing against master, generally a cleaner (preferred by many) way to get the changes into your branch. This does not create a separate commit in case of conflicts.</p>

<pre><code> $ git rebase master
 $ git rebase --continue (once you resolve any conflicts)
</code></pre></li>
</ol>


<p>Note that these are just local branches on your machine. All changes/commits reside on your machine, not on the remote server. We&#8217;ll look at remote branches soon.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Mac UI Tweaks]]></title>
    <link href="https://ushaguduri.com/blog/2012/11/16/mac-ui-tweaks/"/>
    <updated>2012-11-16T13:46:00-08:00</updated>
    <id>https://ushaguduri.com/blog/2012/11/16/mac-ui-tweaks</id>
    <content type="html"><![CDATA[<p>Its easy to think that Mac UI is not customizable but behold-it is!</p>

<p>However, these options are not available via the System Preferences but you can change them from the Terminal. <em>Note the inconsistencies in the boolean values: YES/NO, true/false, 1/0&#8230;I’d have expected better from Apple!</em></p>

<p>Some of the more often looked for settings are shown below. But I&#8217;ve started working on a small utility called <a href="https://github.com/ushag/mac-utils">maclets</a> that is a compilation of settings I find myself frequently using. Once sourced it can be used as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ toggle &lt;service&gt; &lt;on/off&gt;</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>Disable icon in Applicaiton Switcher: add this to the app’s Info.plist</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;key&gt;LSUIElement&lt;/key&gt;
</span><span class='line'>&lt;string&gt;1&lt;/string&gt;</span></code></pre></td></tr></table></div></figure>


<p>Switch off(YES)/on(NO) Dashboard</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ defaults write com.apple.dashboard mcx-disabled -boolean YES; killall Dock</span></code></pre></td></tr></table></div></figure>


<p>Show(true)/hide(false) desktop icons</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ defaults write com.apple.finder CreateDesktop -bool false; killall Finder</span></code></pre></td></tr></table></div></figure>


<p>Disable(false)/enable(true) character picker on long key press in Lion in favor of key repeat (this was a really annoying change)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ defaults write -g ApplePressAndHoldEnabled -bool false </span></code></pre></td></tr></table></div></figure>


<p>Disable(true)/enable(false) Ping sidebar</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ defaults write com.apple.iTunes disablePingSidebar -bool true</span></code></pre></td></tr></table></div></figure>


<p>Disable(true)/enable(true) Ping stuff in iTunes</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ defaults write com.apple.iTunes disablePing -bool true</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Getting into the Git Land-via SVN]]></title>
    <link href="https://ushaguduri.com/blog/2012/11/12/getting-into-the-git-land-via-svn/"/>
    <updated>2012-11-12T14:15:00-08:00</updated>
    <id>https://ushaguduri.com/blog/2012/11/12/getting-into-the-git-land-via-svn</id>
    <content type="html"><![CDATA[<p>All the cool kids use git these days but shifting gears for your way-way-back-then-started repo into git is an intimidating task, let alone scaring the entire team while everyone is busy getting their stuff done.</p>

<p>But you still want to learn git? there is no better way to that than using it every single day-isnt that how you became a pro at svn in the first place? so here comes git-svn to the rescue.</p>

<p>Its a real simple tool that goes bi-directional between git and svn and is so well done that sometimes its just prepending git in front of svn commands!</p>

<p>To start a git repo from svn is as easy as</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git svn clone -s https://example.com/subversion_repo local_dir</span></code></pre></td></tr></table></div></figure>


<p>If your svn repo is not using the standard layout of trunk/branches/tags, you can specify what they are using -T , -b , -t like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git svn clone -s https://example.com/my_subversion_repo -T trunk -b my-branch-tree -t my-tag-tree local_dir</span></code></pre></td></tr></table></div></figure>


<p>Before you start making changes though, you might want to set up the annoying ‘ignores’. Just copy over svn ignore config into git with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git svn show-ignore » .git/info/exclude</span></code></pre></td></tr></table></div></figure>


<p>Ensure your checkout is pointing to the right repo</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git svn info</span></code></pre></td></tr></table></div></figure>


<p>And now you can start exploring and committing to the local git repo using git commands like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add my-file
</span><span class='line'>$ git commit my-file</span></code></pre></td></tr></table></div></figure>


<p>Then comes the slight difference between real git repos and git-svn repos. you most likely heard about git pushing changes. with git-svn, you’d</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git svn dcommit</span></code></pre></td></tr></table></div></figure>


<p>to push changes to the svn repo. and there you go-you made your first commit to svn via git-irony!!</p>

<p>More to come on .gitconfig, branches, cherry-pick’ing etc. but let me suggest installing bash-completion right away so you can just tab-complete the commands instead of typing out in entirety each time-all about saving those precious strokes that so risk every software engineer to carpal tunnel!</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[PDSH - Parallel Distributed SHell]]></title>
    <link href="https://ushaguduri.com/blog/2012/10/05/pdsh-parallel-distributed-shell/"/>
    <updated>2012-10-05T14:35:00-07:00</updated>
    <id>https://ushaguduri.com/blog/2012/10/05/pdsh-parallel-distributed-shell</id>
    <content type="html"><![CDATA[<p>Unless your application is a serving such a small traffic or is in the Beta stage, you are probably working with a load-balanced set of servers - web/application/database - you name it. And when there is an issue, the task of looking at the logs on each of the servers is a nightmare!</p>

<p>One option is to run a remote command via ssh like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh user@host “date”</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>But identifiying the server where you can find more information means running the above N times changing the host each time. For more involved tasks, it gets even more difficult. Oh and what if you accidentally missed a server and claimed that “something did not happen”! You can wrap the command in a loop and come up with a shell script (choose your own language), of course.</p>

<p>But <a href="https://linux.die.net/man/1/pdsh">pdsh</a> simplifies all that. Its pretty much like your own wrapper, but only with more features - especially running in parallel. And fear not, its not learning another language. Even a simple run without too many options that it provides is enough to free up a ton of your time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pdsh -R ssh -w user@host[1-8].full.name “date”</span></code></pre></td></tr></table></div></figure>


<p>Looks so familiar, ain’t it? And all it does is parallel’ly run the date command remotely on host1 through host8.</p>

<p>Whoa! Thats how many keystrokes and minutes saved of your life?</p>

<p>Try it for yourself: <a href="https://code.google.com/p/pdsh/downloads/list">Google Code</a></p>

<p>This is just a flyer ad for pdsh. More details will follow as I keep using it.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[CNAME Vs. A Record]]></title>
    <link href="https://ushaguduri.com/blog/2012/10/03/cname-vs-a-record/"/>
    <updated>2012-10-03T14:31:00-07:00</updated>
    <id>https://ushaguduri.com/blog/2012/10/03/cname-vs-a-record</id>
    <content type="html"><![CDATA[<p>This is one of a nuances of the Domain Name System (read nuisances as well, if you dont quite understand it and end up mixing the two, running with pants on fire that the website is not working!)</p>

<p>Called the Canonical Name, it is similar to saying Jane Smith and Mrs.Smith are the same person. Almost all the websites have a single default CNAME for www. If you see sites where example.com works but www.example.com fails, it most likely is because of this missing CNAME which looks as simple as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>www.example.com. CNAME example.com.</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>And all it is saying is that www.example.com is just another name for example.com, so serve the request as if it went directly to example.com. A-record on the other hand is telling you where to find Jane Smith and Mrs.Smith. In cyberspace, its the address of the machine capable of servicing the requests to example.com and looks equally simple as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example.com. A 123.45.67.8</span></code></pre></td></tr></table></div></figure>


<p>In essence, the minimum DNS entry when you set up a new site should look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>www.example.com. CNAME example.com.
</span><span class='line'>example.com. A 123.45.67.8</span></code></pre></td></tr></table></div></figure>


<p>The order does not matter as much, but note that each CNAME needs a minimum of 2 lookups to get to the machine to talk to.</p>

<p>So choose wisely, depending on how many hoops are required to finally get to the machine!</p>

<p>For the geek in you, the trailing . in the domain names is for the imaginary root server in the internet hierarchy and is called a FQDN notation (Fully Qualified Domain Name)</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[SSH Access to the Hosting server]]></title>
    <link href="https://ushaguduri.com/blog/2012/10/02/ssh-access-to-the-hosting-server/"/>
    <updated>2012-10-02T14:25:00-07:00</updated>
    <id>https://ushaguduri.com/blog/2012/10/02/ssh-access-to-the-hosting-server</id>
    <content type="html"><![CDATA[<p>This section depends more on what style you are comfortable with: point-and-click or the get-dirty-with-the-command-line. I belong to the 2nd class and feel so lost without access to the bare bone shell (which I immediately customize with aliases/shell functions/shortcuts etc). This can be a discussion in its own right.</p>

<p>So anyway, once you have acquired hosting space, the seller gives you an IP address of a physical machine where you can ‘setup your html files’. Depending on the seller(HostGator), you may have to ‘Enable SSH Access’ to open the ssh port.</p>

<p>Then you can type</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh -p 1234 username@123.456.78.9</span></code></pre></td></tr></table></div></figure>


<p>from the shell and voila! you are at the all too familiar bash prompt on the hosting server!</p>

<!-- more -->


<p>But notice that you had to enter your crazy-incomprehensible password,that you most likely copy-paste’d from the email. If you plan on spending any significant time on this box, you will get in and out of it and will be forced to enter the password each time - SSH keys coming to the rescue! I generally use RSA for my keys from my own desktop/laptop.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-keygen -t rsa</span></code></pre></td></tr></table></div></figure>


<p>will generate the necessary public/private keys in your .ssh directory.</p>

<p>You then create a .ssh directory on the new machine and add the id_rsa.pub key to a new authorized_keys file on the server. At the end, here is how the file setup looks like —> note the permissions: 700 for the .ssh directory and 644 for the authorized_keys file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drwx———  2 username groupname 4096 Sep 30 17:26 ./
</span><span class='line'>-rw-r—r—  1 username groupname  752 Sep 30 17:26 authorized_keys</span></code></pre></td></tr></table></div></figure>


<p>And the next time you ssh to the host, you dont have to go searching for the password in your email anymore!</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Domain Registration Vs. Web Hosting]]></title>
    <link href="https://ushaguduri.com/blog/2012/10/01/domain-registration-vs-web-hosting/"/>
    <updated>2012-10-01T14:22:00-07:00</updated>
    <id>https://ushaguduri.com/blog/2012/10/01/domain-registration-vs-web-hosting</id>
    <content type="html"><![CDATA[<p>Any substantial group/idea/person has to have a website these days to prove their legitimacy even in the cyberspace.</p>

<p>Now where does that start? With signing up for a easy to recognize name that is associated with the entity at a Domain Registrar - one who makes sure that you own that name and no one else can get that name, like GoDaddy, 1and1, Network Solutions etc. And you pay for their services-anywhere from $10 to $100+ a year. (Prepare to shell out in the thousands if you want a name real bad, that is already taken). At this point, you only have the name to your credit, with a generic message showing at most but no where close to what you want it to actually be like, when you visit the site via a web browser.</p>

<!-- more -->


<p>The next step is to get some space on a machine connected to the internet-always, so that John in Bangkok or Joe in Paris can see your website anytime of the day. Called Web Hosting, there are so many choices again here - shared, dedicated, colocation - including the big names like Amazon Web Services, Google App Engine, Microsoft Azure etc.</p>

<p>For a simple website, I suggest something like HostGator (best of the lot if you ask me), BlueHost, 1and1, Namecheap and such, where you can get both the above mentioned services in 1 spot with an easy-to-use Control Panel to manage everything.</p>

<p>By the way, for the geek in you,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>whois example.com</span></code></pre></td></tr></table></div></figure>


<p>shows the information you used to sign up with the Domain Registrar and</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nslookup example.com
</span><span class='line'>dig example.com
</span><span class='line'>ping example.com</span></code></pre></td></tr></table></div></figure>


<p>show which IP address(machine) the domain is being served from.</p>

<p>Oh and the next time, I can point anyone, who still ponders why pay twice and are they over-charging etc, straight here..hehe</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[SVN Delete - an oops moment!]]></title>
    <link href="https://ushaguduri.com/blog/2012/03/14/svn-delete-an-oops-moment/"/>
    <updated>2012-03-14T15:48:00-07:00</updated>
    <id>https://ushaguduri.com/blog/2012/03/14/svn-delete-an-oops-moment</id>
    <content type="html"><![CDATA[<p>And how many times did you accidentally delete files from svn repo - be it because you were copying and instead moved, typo’d and deleted 1 file instead of another or for whatever reason?!</p>

<p><strong>Easiest to do:</strong> simply copying the file from elsewhere and svn add</p>

<p><strong>Better way to do:</strong> restore the files, including the svn history.</p>

<!-- more -->


<p>To see which revision deleted the file, foo.file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn log -v
</span><span class='line'>r100 | me
</span><span class='line'>D &lt;local_path&gt;/foo.file </span></code></pre></td></tr></table></div></figure>


<p>Now copy the file from the previous revision using the repo url, not just the location on the local machine</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn copy -r 99 https://&lt;svn_repo_path&gt;/foo.file@99 &lt;local_path_to_foo.file&gt;/.
</span><span class='line'>
</span><span class='line'>$ svn status
</span><span class='line'>A &lt;local_path&gt;/foo.file
</span><span class='line'>
</span><span class='line'>$ svn commit</span></code></pre></td></tr></table></div></figure>


<p>And now the svn log still shows the entire history without the deletion</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn log &lt;local_path&gt;/foo.file
</span><span class='line'>r101 | me | adding back foo.file
</span><span class='line'>r99 | me | last known valid change</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[SVN+SSH: network connection closed unexpectedly]]></title>
    <link href="https://ushaguduri.com/blog/2012/03/13/svn-plus-ssh-network-connection-closed-unexpectedly/"/>
    <updated>2012-03-13T15:27:00-07:00</updated>
    <id>https://ushaguduri.com/blog/2012/03/13/svn-plus-ssh-network-connection-closed-unexpectedly</id>
    <content type="html"><![CDATA[<p>After a long time, I had to work-from-home today because I hurt my shoulder badly. And something with the firewall and/or VPN settings seems to have changed that I couldn’t access the code base anymore. What more can you ask for WFH ;-)</p>

<p>I spent enough time to figure this out that I thought best to note it here. svn was caughing with:</p>

<pre><code>$ svn ls svn+ssh://myhost/myrepo
svn: To better debug SSH connection problems, remove the -q option from ‘ssh’ in the [tunnels] section of your Subversion configuration file.
svn: Network connection closed unexpectedly
</code></pre>

<!-- more -->


<p>The configs(~/.ssh/config and /etc/ssh_config) had nothing specific to tunnels anywhere. I could login to <em>myhost</em> just fine and also port forward to it without problems like before, using the long standing aliases - so nothing stood out. Preliminary instinct is to purge the known_hosts file in ~/.ssh/known_hosts and rebuild it in case the host’s address had changed - no luck. You could see what ssh is doing on a connection with ssh -v, but this is svn+ssh, isnt it? a one-liner to the rescue!</p>

<pre><code>$ export SVN_SSH=”ssh -v “
</code></pre>

<p>and then do retry the svn command to see:</p>

<pre><code>ssh: Could not resolve hostname myhost: nodename nor servname provided, or not known
</code></pre>

<p>Are you kidding me?! Your stupid error message ran me down a dark alley about tunnels and the problem was actually with the hostname?!</p>

<p><strong>Solution:</strong></p>

<ol>
<li><p>As simple as using the FQDN for myhost with each svn command:</p>

<pre><code> $ svn ls svn+ssh://fqdn.myhost.com/myrepo
</code></pre></li>
<li><p>The above is cumbersome if you already have aliases set up or are working with new repos. Better yet is to add the actual IP address for the host to your hosts file in /etc/hosts:</p>

<pre><code> 123.13.13.1 myhost
</code></pre></li>
</ol>


<p><strong>Lesson:</strong> Do not trust the error messages at face value until you get more debug info about where/who its coming from!</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[MYSQL Effects on Views from Changes to Table Structure]]></title>
    <link href="https://ushaguduri.com/blog/2012/03/12/mysql-effects-on-views-from-changes-to-table-structure/"/>
    <updated>2012-03-12T15:23:00-07:00</updated>
    <id>https://ushaguduri.com/blog/2012/03/12/mysql-effects-on-views-from-changes-to-table-structure</id>
    <content type="html"><![CDATA[<p>Au contraire, there are <strong>no</strong> effects of changing a table’s structure on a dependent view in MySQL! I’ve heard that other databases like Oracle automatically pick up changes on the table’s structure, but in MySQL the view is frozen upon creation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">my_view</span> <span class="k">AS</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">my_table</span><span class="p">;</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">my_table</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">my_new_column</span> <span class="o">&lt;</span><span class="k">data</span> <span class="k">and</span> <span class="k">constraints</span><span class="o">&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>If you expect to do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">my_new_column</span> <span class="k">FROM</span> <span class="n">my_view</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>it sure is going to fail.</p>

<p><strong>Solution:</strong> Either drop the view and recreate it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DROP</span> <span class="k">VIEW</span> <span class="n">my_view</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">my_view</span> <span class="k">AS</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">my_table</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or alter the view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">VIEW</span> <span class="n">my_view</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">list</span> <span class="k">of</span> <span class="k">all</span> <span class="n">columns</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">my_table</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Lesson:</strong> Do not forget about the dependent views when you change a table’s structure!</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Database Migrations: Continue on Expected Errors]]></title>
    <link href="https://ushaguduri.com/blog/2012/03/10/database-migrations-continue-on-expected-errors/"/>
    <updated>2012-03-10T15:07:00-08:00</updated>
    <id>https://ushaguduri.com/blog/2012/03/10/database-migrations-continue-on-expected-errors</id>
    <content type="html"><![CDATA[<p>Ever ran into a situation where the migrations would work just as expected in production, but for some reason, are not applicable to other environments? Could be either because the tables exist in production, but for saving space, the other environments use views on it or because you had to manually add the column to set up the new data, so that the application would not come crashing down.</p>

<p>Your approach would really depend on how the migrations are set up. A simple solution no matter what(if you are using straight SQL), is to surround the actual migration sql in a stored procedure and set up continue handlers only for errors that you are already expecting like so:</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DELIMITER</span> <span class="o">//</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">PROCEDURE</span> <span class="n">AddColumnIfNecessary</span> <span class="p">()</span>
</span><span class='line'><span class="k">BEGIN</span>
</span><span class='line'>    <span class="k">DECLARE</span> <span class="k">continue</span> <span class="k">handler</span> <span class="k">for</span> <span class="mi">1060</span> <span class="k">BEGIN</span> <span class="k">END</span><span class="p">;</span>
</span><span class='line'>  <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">mytable</span> <span class="k">add</span> <span class="n">newcolumn</span> <span class="o">&lt;</span><span class="k">type</span> <span class="k">and</span> <span class="k">constraints</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="k">END</span> <span class="o">//</span>
</span><span class='line'><span class="k">DELIMITER</span> <span class="p">;</span>
</span><span class='line'><span class="k">CALL</span> <span class="n">AddColumnIfNecessary</span><span class="p">();</span>
</span><span class='line'><span class="k">DROP</span> <span class="n">AddColumnIfNecessary</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are gearing up for table not existing too, then add another handler for 1146 as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DECLARE</span> <span class="k">continue</span> <span class="k">handler</span> <span class="k">for</span> <span class="mi">1146</span> <span class="k">BEGIN</span> <span class="k">END</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are working with views by the same name, you’d see “is not BASE TABLE”(error 1347), not table does not exist. So you’d need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DECLARE</span> <span class="k">continue</span> <span class="k">handler</span> <span class="k">for</span> <span class="mi">1347</span> <span class="k">BEGIN</span> <span class="k">END</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essentially, its like try - catch for SQL! The above handlers, if you noticed, are not really doing anything between the BEGIN and END. But you can set up any additional SQL in there. However, make sure to declare the handlers before you actually execute the SQL which is going to “throw” these errors</p>

<p><strong>Lesson:</strong> Although there are work-arounds like the above, think through why the purpose of “migrations” is defeated in the first place and if the process(whatever triggered the need for altering the table) should even be part of a migration when you are manually meddling with the database.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Dates &amp; Times - Front &amp; Back]]></title>
    <link href="https://ushaguduri.com/blog/2012/03/10/dates-and-times-front-and-back/"/>
    <updated>2012-03-10T14:39:00-08:00</updated>
    <id>https://ushaguduri.com/blog/2012/03/10/dates-and-times-front-and-back</id>
    <content type="html"><![CDATA[<p>Not that I did not learn anything the past week but that so much has been happening that i failed to make time to write about it!</p>

<p>Now to the mystery behind dates transferred between the front end(client browser) getting changed when coming back from the backend (Java)…</p>

<p>If you think creating Date objects is so simple, behold! there is something called a “timezone” which gets used for generating the Dates - both by Javascript and Java. And it depends on where the machine is located - in some countries it also depends on what part of the year with the stupid and confusing “daylight savings time”.</p>

<!-- more -->


<p>In Javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>          <span class="c1">// Creates a Date with the local time for the browser</span>
</span><span class='line'><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">milliseconds</span><span class="p">);</span> <span class="c1">// Gives a Date with the ms offset from 1/1/1970 UTC</span>
</span><span class='line'><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>      <span class="c1">// Parses the text from standard formats with the local timezone unless, the timezone is included</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly in Java:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="n">milliseconds</span><span class="o">);</span> <span class="c1">// Gives a Date with the ms offset from 1/1/1970 GMT which is affected by daylight savings</span>
</span></code></pre></td></tr></table></div></figure>


<p>So even if you think passing milliseconds will do the job, you are mistaken because one is using UTC and the other GMT.</p>

<p><strong>Solution:</strong> There are several approaches to solving this problem, that need to be carefully evaluated:</p>

<ol>
<li>Use UTC times as the protocol to interpret on both ends:

<ul>
<li>there’s a handy jvm option to ensure that all dates on the java side are interpreted as UTC:
<code>
—Duser.timezone=UTC
</code></li>
</ul>


<p> The problem however is that you will be swamped with UTC dates in the java land(logs, output etc) which is just too cumbersome when debugging a problem.</p>

<ul>
<li>a better route to this approach: use UTC in code where needed and the rest of the jvm uses the default timezone of the machine, so other processes do not have to change.</li>
</ul>
</li>
<li>Pass timezones in the date string format, so the dates are created correctly</li>
<li>Pass around the date/month/year as just that - 3 parameters and each end would know how to display/use them.</li>
</ol>


<p><strong>Lesson:</strong> Never send milliseconds since epoch back and forth, since they are interpreted differently based on where the machine is located!</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Advanced Watir Use]]></title>
    <link href="https://ushaguduri.com/blog/2012/02/29/advanced-watir-use/"/>
    <updated>2012-02-29T16:17:00-08:00</updated>
    <id>https://ushaguduri.com/blog/2012/02/29/advanced-watir-use</id>
    <content type="html"><![CDATA[<p>&#8230;if you want to call hacking Watir to work with certain “advanced” UI elements that!</p>

<p><strong>Element in the works:</strong> jQuery UI&#8217;s Slider</p>

<p>There’s nothing straightforward in Watir to change the slider and trigger the events as if the user interacted with the slider. In a normal slider implementation, that would either be the ‘change’ or ‘stop’ events on the slider. So how do you do that? Use the <strong>execute_script</strong> to directly do what you need via javascript.</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$slider</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="err">“#</span><span class="nx">myslider</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="nx">$slider</span><span class="p">.</span><span class="nx">slider</span><span class="p">(</span><span class="err">‘</span><span class="nx">option</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">values</span><span class="err">’</span><span class="p">,</span> <span class="p">[</span><span class="nx">min</span><span class="p">,</span> <span class="nx">max</span><span class="p">]);</span> <span class="c1">//automatically triggers the ‘change’ event</span>
</span><span class='line'><span class="nx">$slider</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">$slider</span><span class="p">,</span> <span class="nx">stop</span><span class="p">,</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>event and ui are objects you can self-create and send to the caller since your call handler signature would’ve been</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">stop</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that you know the js, you can simply execute it on the watir’s ‘browser’ instance</p>

<p><strong>Solution:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">browser</span><span class="o">.</span><span class="n">execute_script</span> <span class="err">“</span><span class="o">&lt;</span><span class="n">all</span> <span class="n">the</span> <span class="n">above</span> <span class="n">js</span><span class="o">&gt;</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Lesson:</strong> Watir can be hacked to work even with complex and dynamic web pages ;-)</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Finding Watir Elements with XPATH]]></title>
    <link href="https://ushaguduri.com/blog/2012/02/24/finding-watir-elements-with-xpath/"/>
    <updated>2012-02-24T16:10:00-08:00</updated>
    <id>https://ushaguduri.com/blog/2012/02/24/finding-watir-elements-with-xpath</id>
    <content type="html"><![CDATA[<p>We recently got into automated ui testing with watir.</p>

<p>First impression: Awesome!</p>

<p>Then we added rspec and rake when the nightmares began - more about that later perhaps.</p>

<p>For a simple page with a few DOM elements, its pretty straightforward. Enter a highly dynamic, complex rendering logic and the DOM access breaks down. Something even as intellectually simple as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">browser</span><span class="o">.</span><span class="n">div</span><span class="p">(</span><span class="ss">:id</span><span class="o">=&gt;</span><span class="err">”</span><span class="n">myid</span><span class="err">”</span><span class="p">)</span><span class="o">.</span><span class="n">div</span><span class="p">(</span><span class="ss">:class</span><span class="o">=&gt;</span><span class="err">”</span><span class="n">myclass</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>actually coughed and puffed with the watir-webdriver &lt;0.5 versions, specifically on Firefox. But of course, there is a workaround - XPATH! We are ‘Engineers’ afterall!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">browser</span><span class="o">.</span><span class="n">element</span><span class="p">(</span><span class="ss">:xpath</span> <span class="o">=&gt;</span> <span class="err">“</span><span class="o">//</span><span class="n">div</span><span class="o">[</span><span class="nb">id</span><span class="o">=</span><span class="n">myid</span><span class="o">]/</span><span class="n">div</span><span class="o">[</span><span class="n">class</span><span class="o">=</span><span class="n">myclass</span><span class="o">]</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with XPath though, is that its absolute and highly specific. If you so much as change the class from</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">”myclass</span> <span class="na">myclass2</span><span class="err">”</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Xpath breaks and so do your tests.</p>

<p><strong>Solution:</strong> Update to watir-webdriver 0.5.2</p>

<p><strong>Lesson:</strong> Be wary of anything &lt; 1.0</p>
]]></content>
  </entry>

</feed>
